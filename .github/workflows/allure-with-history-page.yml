name: Allure Report with history page

on:
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Update Playwright to latest version
        run: npm install -D @playwright/test@latest playwright@latest allure-playwright

      - name: Install Playwright browsers
        run: npx playwright install chromium --with-deps

      - name: Install Allure commandline
        run: |
          curl -o allure-commandline.tgz -OL https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/2.25.0/allure-commandline-2.25.0.tgz
          tar -zxvf allure-commandline.tgz -C /tmp
          sudo mv /tmp/allure-2.25.0 /opt/allure
          sudo ln -s /opt/allure/bin/allure /usr/bin/allure
          rm allure-commandline.tgz

      - name: Run Playwright tests
        run: npx playwright test --project=chromium --grep @smoke
        env:
          CI: true

      - name: Set Timestamped Report Directory
        run: |
          TS=$(date +'%Y%m%d-%H%M%S')
          echo "REPORT_DIR=allure-reports/$TS" >> $GITHUB_ENV

      - name: Generate Allure Report
        if: always()
        run: |
          mkdir -p "$REPORT_DIR"
          allure generate allure-results -o "$REPORT_DIR" --clean

      - name: Upload Allure Report artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: new-allure-report
          path: allure-reports
          retention-days: 7

  deploy-report:
    needs: test
    if: always()
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
    environment:
      name: github-pages
    steps:
      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages

      - name: Download new Allure Report artifact
        uses: actions/download-artifact@v4
        with:
          name: new-allure-report
          path: new-allure-report

      - name: Merge new report into history
        run: |
          mkdir -p gh-pages/allure-reports
          # Copy each subfolder from new-allure-report (should only be one, timestamped)
          cp -r new-allure-report/* gh-pages/allure-reports/

      - name: Generate Allure Report Index (table with date/time)
        run: |
          REPORTS_DIR="gh-pages/allure-reports"
          INDEX_FILE="$REPORTS_DIR/index.html"
          cat > "$INDEX_FILE" <<EOF
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <title>Allure Report History</title>
            <style>
              body { font-family: sans-serif; margin: 2em; }
              h1 { color: #212121; }
              p  { color: #444; margin-bottom: 2em; }
              table { border-collapse: collapse; width: 100%; }
              th, td { padding: 0.5em 1em; border-bottom: 1px solid #eee; text-align: left; }
              tr:hover { background: #fafafa; }
              a { color: #1976d2; text-decoration: none; }
              a:hover { text-decoration: underline; }
            </style>
          </head>
          <body>
            <h1>Allure Report History</h1>
            <p>
              This page lists all Allure test reports generated by GitHub Actions.<br>
              Each row corresponds to a CI test run. Click "Open Report" to view any historical Allure HTML report.
            </p>
            <table>
              <thead>
                <tr>
                  <th>Timestamp</th>
                  <th>Date/Time</th>
                  <th>Report Link</th>
                </tr>
              </thead>
              <tbody>
          EOF

                    # List all subfolders, sort newest first
                    for d in $(ls -d $REPORTS_DIR/*/ 2>/dev/null | sort -r); do
                      [ -d "$d" ] || continue
                      ts=$(basename "$d")
                      dt="$(date -d "${ts:0:8} ${ts:9:2}:${ts:11:2}:${ts:13:2}" +"%Y-%m-%d %H:%M:%S" 2>/dev/null || echo "$ts")"
                      echo "      <tr><td>$ts</td><td>$dt</td><td><a href=\"./$ts/index.html\">Open Report</a></td></tr>" >> "$INDEX_FILE"
                    done

                    cat >> "$INDEX_FILE" <<EOF
              </tbody>
            </table>
          </body>
          </html>
          EOF

      - name: Set summary outputs (passed/failed) # Setup summary for email sending
        id: summary
        if: always()
        run: |
          # Find the newest Allure report directory
          LATEST_REPORT_DIR=$(ls -dt gh-pages/allure-reports/*/ | head -n 1)
          SUMMARY_JSON="${LATEST_REPORT_DIR}widgets/summary.json"
          echo "Found summary at $SUMMARY_JSON"
          if [ -f "$SUMMARY_JSON" ]; then
            PASSED=$(jq '.statistic.passed' "$SUMMARY_JSON")
            FAILED=$(jq '.statistic.failed' "$SUMMARY_JSON")
          else
            PASSED=0
            FAILED=0
            echo "No summary.json found at $SUMMARY_JSON!"
          fi
          echo "passed=$PASSED" >> $GITHUB_OUTPUT
          echo "failed=$FAILED" >> $GITHUB_OUTPUT
      
      - name: Commit and push to gh-pages
        run: |
          cd gh-pages
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add allure-reports
          timestamp=$(date)
          git commit -m "Update Allure report history: $timestamp" || echo "No changes to commit"
          git push origin gh-pages

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: gh-pages/allure-reports

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Send email via SendGrid  # Add Send email notifications
        if: always()
        env:
          SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
          RECIPIENTS: bv.user.as@gmail.com
          SENDER: serhii.nv@gmail.com
          REPORT_URL: https://serhiinv.github.io/tsc-project/ # or workflow run URL / artifact link
        run: |
          SUBJECT="Allure Report - ${{ github.workflow }} - ${{ github.ref_name }} - Passed:${{ steps.summary.outputs.passed }} Failed:${{ steps.summary.outputs.failed }}"
          BODY="Test run summary:\nPassed: ${{ steps.summary.outputs.passed }}\nFailed: ${{ steps.summary.outputs.failed }}\nReport: $REPORT_URL\n\nSee artifacts for details."

          curl --request POST \
            --url https://api.sendgrid.com/v3/mail/send \
            --header "Authorization: Bearer $SENDGRID_API_KEY" \
            --header 'Content-Type: application/json' \
            --data '{
              "personalizations": [{
                "to": [{"email": "'"$RECIPIENTS"'"}],
                "subject": "'"$SUBJECT"'"
              }],
              "from": {"email": "'"$SENDER"'"},
              "content": [{
                "type": "text/plain",
                "value": "'"$BODY"'"
              }]
            }'